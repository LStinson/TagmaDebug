=head2 NAME

TagmaDebug - Interactive TCL Debugger

=head1 SYNOPSIS

tagmadebug.tcl [Options] [--] YourScript.tcl

=head1 OPTIONS

=over 10

=item B<-c>

Connect to a Tagma debug control server.

=item B<-H> HOST

Connect to HOST instead of localhost.

=item B<-h>

Display this text.

=item B<-P> PORT

Connect to PORT instead of 5444.


=back

=head1 DESCRIPTION

B<TagmaDebug> is a simple interactive debugger for TCL programs.

When B<TagmaDebug> starts it creates a trace on "B<__TagmaDebugMain>." This
procedure sources the script provided on the command line. The trace on this
procedure basically causes a break on every command. Once the script completes
the procedure "B<__TagmaDebugComplete>" is called. There is a hidden enter
trace on this procedure to ensure the user gets the debugger prompt one last
time.

The B<unknown> command is replaced and the original called. If the original
unknown throws an error it is caught. The error message is displayed and the
debugger is entered.

All output from the debugger is written to B<stderr>. This allows for
redirection of the program or debugger output if desired.

The debugger will not step into unknown.

=head1 PROMPT

The prompt is composed of flags in curly brackets '{}', the level of
execution, the procedure (if one is executing) and the name of the debugger.

The flags indicate when certain features are enabled. 'B' indicates the body
of precedures will be displayed. If disabled only the procedure name and
arguments are printed. 'E' indicates enter will continue a step, the same as
typing 'c Enter'. 'P' indicates packages will be stepped into. 'V' indicates
verbose mode is enabled.  This will cause additional output in certain places.

Sample prompt: {E}(1 => foo)Tagma>

This prompt indicates Enter will continue a step and execution is one level
deep in the procedure "foo".

=head1 COMMANDS

There are several interactive commands that control the debugger. There is no
line editing and very little nicety.

=over 12

=item B<!>

Executes a shell command.

=item B<=>

Prints the content of each variable name provided.

=item B<a> or B<E<gt>>

Prints the command being executed.

=item B<c> or Enter

Continue execution.

=item B<e> or B<[..]>

Evaluates TCL code. When using B<[..]> The closing ']' is required.

=item B<h> or B<?>

Prints the help text.

=item B<f> or B<ff>

Prints the stack frame. B<ff> prints also prints the line and file, when
available.

Prints the Frame #, Level # (as in info level), Procedure name and command.
The command is truncated if it is multiple lines.

=item B<var log>

Logs all modifications of a variable to stderr.

=item B<var break>

Adds breakpoint for writes to a variable.

=item B<var info>

Prints all variables being watched for.

=item B<var clear>

Clears logging and breaks for variables. Passes the variable to [string match
...] so globbing can be used.

=item B<cmd enter>

Set a break point for the entering of a command.

=item B<cmd leave>

Set a break point for the leaving of a command.

=item B<cmd step>

Steps through the command. Every command that is executed inside the command
is a breakpoint.

=item B<cmd clear>

Clear break points. Passes the command to [string match ...] so globbing can
be used.

=item B<con>

Connect to a Tagma Debug control server.
Optional Host and port. (Default: localhost and 5444)

=item B<p>

Prints the current level & procedure. When at the top level '::' is printed
for the procedure.

=item B<r>

Restarts the program.

=item B<x> or B<q>

Exit the debugger. Ctrl-D should also have the same effect.

=back

=head1 SETTINGS

Settings to control TagmaDebug. These are reflected by the flags inside B<{}>
in the prompt. The flags and settings use the same letter.

=over 8

=item B<B>

Toggle printing the body of procedures when they are defined.

=item B<E>

Toggle Enter acting as a shortcut to 'c Enter'.

=item B<P>

Toggle stepping into package.

=item B<V>

Toggle verbosity. Print extra info, when available.

=back

=head1 CONTROL SERVER

B<NOTE:> The shell does not work under Tkcon.

The program server.tcl starts a TCP server. Tagma Debug can connect to this
server for remote control. All debugger output and user input is sent to comes
from the server. The server requires an event loop process to function. By
default if the program is run it starts the server process, enters the remote
debug shell and starts an event loop. The shell is designed to make debugging
similar to using Tagma Debug directly.

The 'tagma' command is used to control the server and interact with the
debugger. With no options it sends its areguments to the remote debugger.

B<tagma Options:>

=over 10

=item B<-help>

Print help for the tagma command.

=item B<-select>

Select from connected debuggers. Lists the available and current connections
with no arguments.

=item B<-shell>

Enter an interactive shell. Simualtes working directly with the debugger. If
there is no active connection it will wait for a client to connect. The server
must be running before the shell is started.

=item B<-start>

Start the Tagma server process. (Optional port)

=item B<-verbose>

Control verbose mode. (on/off) Displays the current state with no arguments.

=item B<-->

End option processing.

=back

=head1 PORTABILITY

B<TagmaDebug> should work with any TCL version 8.4 or later. Testing has thus
far been limited to Tcl 8.5 under Cygwin on Windows 7.

=head1 INSTALLATION

Either copy F<tagmadebug.tcl> where you want it or run "make install".

=head1 HOME

L<https://github.com/LStinson/TagmaDebug>

L<http://wiki.tcl.tk/28695>

=head1 COPYRIGHT

This script is derived from "TclDebugger by S.Arnold. v0.1 2007-09-09" -
L<http://wiki.tcl.tk/19872>. What ever copyright he says his code is
under is what applies to this one. Since it was listed publicly with no
restrictions I am assuming it is free to modify.

=head1 AUTHOR

Written by Lorance Stinson AT Gmail....

=cut
